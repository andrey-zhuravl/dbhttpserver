Техническое задание
по созданию HTTP-сервера

1. ВВЕДЕНИЕ

2. НАЗНАЧЕНИЕ РАЗРАБОТКИ
	HTTP-сервер - это первый этап разработки ПО, предназначенного для взаимодействия (отправки запросов к.л. данных по определенным критериям, "координатам" в таблицах базы, добавление новых и изменение/удаление существующих записей в таблицах базы) с удаленной базой данных через адресную строку браузера, либо иные формы отправления запросов. Каждый запрос состоит из 3-Х частей:
		1. хост: IP-адрес хоста и порт - для доступа к HTTP-серверу;
		2. путь: путь к конкретному полю в таблице базы. Добавляется через знак "/" после порта. В пути указывается название таблицы, название столбца, значение ID, либо иного интересующего нас поля;
		3. тело: информация, представленная в формате JSON (либо словаря Python) с наименованием ключа и его значением, оформленными в кавычки. Тело предназначено для изменения существующих и добавления новых записей в таблицу базы.
	Сам HTTP-сервер предназначен для принятия запросов от клиента, их обработки и в обработанном виде отправки их в другие модули для непосредственного взаимодействия с таблицами базы.
	
3. ТРЕБОВАНИЯ К ПРОГРАММЕ (ОБЩИЕ ТРЕБОВАНИЯ, СОСТАВ, ФУНКЦИОНАЛ)

3.1 ОБЩИЕ ТРЕБОВАНИЯ. В общем случае HTTP-сервер должен выполнять следующие функции:
3.1.1. 	принимать POST-запросы, сформированные по следующему шаблону (пример):
			URL: "http://localhost:9920/users/insert/9"
				где	:
				host = http://localhost:9920
				ПУТЬ(path) = /users/insert/9
		ТЕЛО(body): {'id_city': 1111, 'user_name': 'Sara'}
		Header = 	{'Content-type': 'application/json', 'Accept': 'text/plain'}
	
3.1.2.	В ответ отсылать путь + имя_функции_обработчика в MyController.

3.1.3. 	принимать GET-запросы, сформированные по следующему шаблону (пример):
			URL: "http://localhost:9920/users/insert/9"
				где	:
				host = http://localhost:9920
				ПУТЬ(path) = /users/insert/9
	
3.1.4.	В ответ отсылать путь + имя_функции_обработчика в контроллере.

3.1.5. из POST-запросов требуется 	извлечь ТЕЛО,
									извлечь ПУТЬ
	
3.1.6. вызывать метод, соответствующий первому слову в ПУТИ. Это может быть название таблицы, к примеру users, product, order
	
3.1.7. в этот метод передать ДВА ПАРАМЕТРА:	1 - оставшуюся часть ПУТИ (т.е. "/insert/9")
											2 - тело
											
3.1.8. получать от метода ответ в виде СТРОКИ, в которой будет лежать результат, полученный от базы
	
3.1.9. с помощью специального метода должен отправлять в базу, в соответствии с тем ПУТЕМ, который был в запросе запросы на выборку, добавление, изменение, удаление записей.
		
		
3.2 СОСТАВ ПРОГРАММЫ
	Состав HTTP-сервера должен быть следующий:
	
3.2.1 - класс MyServer(BaseHTTPRequestHandler):
			метод do_GET
			метод do_POST
			
3.2.2 - класс MyController:
			метод-обработчик (анализатор) ПУТИ - выбирает, к какой таблице идет запрос
			методы, отправляющие данные в модуль работы с базой (DAO)
			
3.2.3 - класс DAO:
			методы, работающие с базой
			(insert,
			update
			select
			delete
			и пр.)
		
		
3.3	ФУНКЦИОНАЛ ПРОГРАММЫ (ФУНКЦИОНАЛ КАЖДОГО МОДУЛЯ и метода)
3.3.1 класс MyServer(BaseHTTPRequestHandler):
3.3.1.1. метод do_POST :
		а) 	принимает POST-запросы, сформированные по следующему шаблону (пример):
			URL: "http://localhost:9920/users/insert/9"
					где	:
					host = http://localhost:9920
					ПУТЬ(path) = /users/insert/9
			ТЕЛО(body): {'id_city': 1111, 'user_name': 'Sara'}
			Header = 	{'Content-type': 'application/json', 'Accept': 'text/plain'}
		б)	выделяет из запроса ПУТЬ (.path)
								ТЕЛО (.rfile.read)
		в)	передает ПУТЬ и ТЕЛО в MyController
		г)	принимает от MyController имя_функции_обработчика.
	
3.3.1.2. метод do_GET :
		а) 	принимает GET-запросы, сформированные по следующему шаблону (пример):
			URL: "http://localhost:9920/users/insert/9"
					где	:
					host = http://localhost:9920
					ПУТЬ(path) = /users/insert/9
		б)	выделяет из запроса ПУТЬ (.path)
								ТЕЛО (.rfile.read)
		в)	передает ПУТЬ в MyController
		г)	принимает от MyController имя_функции_обработчика в контроллере.
		
3.3.2 класс MyController
3.3.2.1. метод controller (сейчас это requestsToDB):
		а) принимает от do_POST два аргумента - ПУТЬ и ТЕЛО, либо от do_GET - ПУТЬ;
		б) анализирует ПУТЬ - выделяет первое слово в ПУТИ и, в зависимости от этого слова (к примеру users, product или city, или order) вызывает один из нескольких методов, каждый из которых соответствует определенной команде, отправляемой в базу (из класса  DAO), которые должны подготавливать и передавать данные в DAO
		в) передает этим методам остаток ПУТИ (без первого слова) и ТЕЛО (пока не реализовано) (если do_GET - то только ПУТЬ);
		г) возвращает в метод do_POST сервера имя_функции_обработчика в контроллере.

3.3.2.2. методы работы с базой - userInsert, userUpdate, userSelect, userDelete
		а) возвращают имя_функции_обработчика
	
5. ТРЕБОВАНИЯ К ПРОГРАММНОЙ ДОКУМЕНТАЦИИ

6. ПОРЯДОК КОНТРОЛЯ И ПРИЕМКИ (описание процесса тестирования ПО):
6.1 ОБЩИЕ СВЕДЕНИЯ.
Проверка работы HTTP-сервера будет вестись путем тестирования. Всего различают 3 вида тестирования:
 - Интеграционные тесты;
 - Функциональные тесты;
 - Юнит-тесты.
 
6.2 ИНТЕГРАЦИОННЫЕ ТЕСТЫ.
В данной работе HTTP-сервер будет тестироваться ИНТЕГРАЦИОННЫМИ ТЕСТАМИ.

6.2.1	Требования к общей методике тестирования. Суть тестов.
		Требуется протестировать выполнение HTTP-сервером требований настоящего ТЗ по пунктам:
			- 3.1.1. 	принимать от клиента POST-запросы ...
			- 3.1.2.	В ответ клиенту отсылать путь + имя_функции_обработчика_в_MyControllerMyController (имеется ввиду функция_обработчик находится в классе MyController).

6.2.2	Методика тестирования. Конкретные действия.
6.2.2.1. Написать фикстуру fixturePostUserID (имя как пример), в которой будут указаны:
		URL: "http://localhost:9920/users/insert/9"
		где	:
			host = http://localhost:9920
			ПУТЬ(path) = /users/insert/9
		ТЕЛО(body): {'id_city': 1111, 'user_name': 'Sara'}
		Header = 	{'Content-type': 'application/json', 'Accept': 'text/plain'}
        codeSuccessful = 200
		nameFunction = user_Insert (или user_Update, _Delete, _Select)
		 
6.2.2.2. тест test_requestPostToHTTPServer, который будет:
         - присваивать элементам кортежа данные из фикстуры: 
                (URL, data, header, code) = fx.fixturePostUserID();
         - посылать команду на запуск, пока что только, метода do_POST http-сервера;
         - формировать объект запроса вида 
                  req = requests.post(URL, headers=myHeader, params=data)
         - проверять успешность прохождения запроса по коду 200 :
                  assertEqual(req.status_code, codeSuccessful )
		- получать ответ от HTTP-сервера методом req.text 
		- из полученного ответа выделять строку вида '/insert/9/users_Insert'
		- сравнивать эту строку со строкой

6.3	

6.4 ЮНИТ-ТЕСТЫ
	это выполнение тестов по пунктам ТЗ:
		3.2.1.1
		3.2.2.1
		3.2.3.ххх
		и т.д.
		
	сейчас этих тестов не будет !!!
































































