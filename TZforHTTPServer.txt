Техническое задание
по созданию HTTP-сервера

1. ВВЕДЕНИЕ

2. НАЗНАЧЕНИЕ РАЗРАБОТКИ
	HTTP-сервер - это первый этап разработки ПО, предназначенного для взаимодействия (отправки запросов к.л. данных по определенным критериям, "координатам" в таблицах базы, добавление новых и изменение/удаление существующих записей в таблицах базы) с удаленной базой данных через адресную строку браузера, либо иные формы отправления запросов. Каждый запрос состоит из 3-Х частей:
		1. хост: IP-адрес хоста и порт - для доступа к HTTP-серверу;
		2. путь: путь к конкретному полю в таблице базы. Добавляется через знак "/" после порта. В пути указывается название таблицы, название столбца, значение ID, либо иного интересующего нас поля;
		3. тело: информация, представленная в формате JSON (либо словаря Python) с наименованием ключа и его значением, оформленными в кавычки. Тело предназначено для изменения существующих и добавления новых записей в таблицу базы.
	Сам HTTP-сервер предназначен для принятия запросов от клиента, их обработки и в обработанном виде отправки их в другие модули для непосредственного взаимодействия с таблицами базы.
	
3. ТРЕБОВАНИЯ К ПРОГРАММЕ (ОБЩИЕ ТРЕБОВАНИЯ, СОСТАВ, ФУНКЦИОНАЛ)
	3.1 ОБЩИЕ ТРЕБОВАНИЯ
		В общем случае HTTP-сервер должен выполнять следующие функции:
		1. принимать POST-запросы, сформированные по следующему шаблону (пример):
			URL: "http://localhost:9920/users/insert/9"
					где	:
					host = http://localhost:9920
					ПУТЬ(path) = /users/insert/9
			ТЕЛО(body): {'id_city': 1111, 'user_name': 'Sara'}
			Header = 	{'Content-type': 'application/json', 'Accept': 'text/plain'}
		
		2. принимать GET-запросы, сформированные по следующему шаблону (пример):
			URL: "http://localhost:9920/users/insert/9"
					где	:
					host = http://localhost:9920
					ПУТЬ(path) = /users/insert/9
		
		3. из POST-запросов требуется 	извлечь ТЕЛО,
										извлечь ПУТЬ
		
		4. вызывать метод, соответствующий первому слову в ПУТИ. Это может быть название таблицы, к примеру users, product, order
		
		5. в этот метод передать ДВА ПАРАМЕТРА:	1 - оставшуюся часть ПУТИ (т.е. "/insert/9")
												2 - тело
												
		6. получать от метода ответ в виде СТРОКИ, в которой будет лежать результат, полученный от базы
		
		7. с помощью специального метода должен отправлять в базу, в соответствии с тем ПУТЕМ, который был в запросе запросы на выборку, добавление, изменение, удаление записей.
		
3.1 СОСТАВ ПРОГРАММЫ
	Состав HTTP-сервера должен быть следующий:
	
	1 - класс MyServer(BaseHTTPRequestHandler):
			метод do_GET
			метод do_POST
			
	2 - класс MyController:
			метод-обработчик (анализатор) ПУТИ - выбирает, к какой таблице идет запрос
			методы, отправляющие данные в модуль работы с базой (DAO)
			
	3 - класс DAO:
			методы, работающие с базой
			(insert,
			update
			select
			delete
			и пр.)
		
3.2	ФУНКЦИОНАЛ ПРОГРАММЫ (ФУНКЦИОНАЛ КАЖДОГО МОДУЛЯ и метода)
3.2.1 класс MyServer(BaseHTTPRequestHandler):
	1. метод do_POST :
		а) 	принимает POST-запросы, сформированные по следующему шаблону (пример):
			URL: "http://localhost:9920/users/insert/9"
					где	:
					host = http://localhost:9920
					ПУТЬ(path) = /users/insert/9
			ТЕЛО(body): {'id_city': 1111, 'user_name': 'Sara'}
			Header = 	{'Content-type': 'application/json', 'Accept': 'text/plain'}
			
		б)	выделяет из запроса ПУТЬ (.path)
								ТЕЛО (.rfile.read)
		
		в)	передает ПУТЬ и ТЕЛО в MyController
		
		г)	принимает от MyController результат запроса, либо результат работы с базой (ответ от базы, отчет о выполненных действиях в базе) - это могут быть запросы всех типов - SELECT, DELETE, INSERT, UPDATE
		
		д)	формирует и отправляет клиенту, установившему соединение, ответ сервера - response (.wfile.write) - т.е. данные, полученные от MyController
	
	2. метод do_GET :
		а) 	принимает GET-запросы, сформированные по следующему шаблону (пример):
			URL: "http://localhost:9920/users/insert/9"
					где	:
					host = http://localhost:9920
					ПУТЬ(path) = /users/insert/9
			
		б)	выделяет из запроса ПУТЬ (.path)
								ТЕЛО (.rfile.read)
		
		в)	передает ПУТЬ в MyController
		
		г)	принимает от MyController результат запроса в базу
		
		д)	формирует и отправляет клиенту, установившему соединение, ответ сервера - response (.wfile.write) - т.е. данные, полученные от MyController
		
3.2.2 класс MyController
	1. метод controller (сейчас это requestsToDB):
		а) принимает от do_POST два аргумента - ПУТЬ и ТЕЛО, либо от do_GET - ПУТЬ;
		б) анализирует ПУТЬ - выделяет первое слово в ПУТИ и, в зависимости от этого слова (к примеру users, product или city, или order) вызывает один из нескольких методов, каждый из которых соответствует определенной команде, отправляемой в базу (из класса  DAO), которые должны подготавливать и передавать данные в DAO
		в) передает этим методам остаток ПУТИ (без первого слова) и ТЕЛО (пока не реализовано) (если do_GET - то только ПУТЬ);
		г) принимает от этих методов результат работы с базой
		д) возвращает в метод do_POST сервера результат работы с базой

	2. методы работы с базой - userInsert, userUpdate, userSelect, userDelete
		а) каждый из них принимает от метода controller два аргумента - остаток ПУТИ и ТЕЛО, либо только остаток ПУТИ;
		б) отправляют соответствующую команду и данные в DAO
		г) принимают от DAO результат работы с базой
		д) возвращают в метод controller результат работы с базой

3.2.3 класс DAO
	его методы работают с базой. Установка соединения, вставка, выборка, замена и удаление записей. Формирование курсора, отложенных запросов и пр. Результаты работы с базой должны возвращаться в MyController соответствующим методам.
	
5. ТРЕБОВАНИЯ К ПРОГРАММНОЙ ДОКУМЕНТАЦИИ